{
  "swagger": "2.0",
  "info": {
    "description": "This is documentatin for the Node API. For every request you must include in the header: \n `Content-Type: application/json` \n\n <b>Routes with a lock next to them use authorization</b>. In this case, its request-scope JWT tokens in the `Authorization` header coupled with server-side database session persistence. An example secure request would contain the header:\n `Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...`",
    "version": "0.5.9",
    "title": "CryptX System",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "hello@2030.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "cryptx-app-staging.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "user",
      "description": "Creation, authentication and management"
    },
    {
      "name": "security",
      "description": "Roles and Permissions management"
    },
    {
      "name": "MISC",
      "description": "Other"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "MISC"
        ],
        "summary": "Default route (ALL VERBS)",
        "description": "response received when no mathcing route was found for the supplied HTTP verb. While the provided example is a `GET`, this will **work the same on all HTTP verbs**",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      }
    },
    "/roles/create": {
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Create a role",
        "description": "Create a role by provided name and permission codes. Requires the `perm_alter_user_roles` permission and the `perm_view_roles` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Role creation info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/{role_id}": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get ifnormation of role by id",
        "description": "Fetch role by id. Requires the `perm_view_roles` permission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/all": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get a list of roles",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_roles` permission to fetch.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnRolesListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Get a list of roles (filtered)",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_roles` permission to fetch.\nAll filter keys optional. `prop_name_x` refers to direct data proeprty names, equivalent to use inside of an `AND` block in most cases. \nAll `value` keys can be numbers, strings or arrays of the two (`Swagger 2.0` too limiting to show this)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilterWithPerms"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnRolesListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/{role_id}/edit": {
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Change infomration of role",
        "description": "Change makes up the role identified by `role_id`. \nRequires the `perm_alter_role_perm` permission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to change permissions for",
            "required": true,
            "type": "number"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New Role Information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/permissions/list": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get a list of all system permissions, grouped by category",
        "description": "Requires the `perm_view_roles` permission to fetch.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnGroupedPermissionsListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/{role_id}/delete": {
      "delete": {
        "tags": [
          "security"
        ],
        "summary": "Delete system role",
        "description": "Delete information related to role `role_id` in the system. Only allowed if no users are currently using the role. Associated role permissions remain unchanged. Requires the `perm_alter_user_roles` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to delete",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Authenticate user",
        "description": "Perform login for specific system user",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginUserResponse"
            }
          },
          "422": {
            "description": "Invalid operation",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/send_reset_token": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Send password reset token to email",
        "description": "Generated password reset info and sends the token with reset link to supplied email.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reset password email",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "forgot@password.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      }
    },
    "/password_reset/{token}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Check password reset token validity",
        "description": "Called by FE once the user follows the password reset link in their email. If this returns an error, no password reset for them!",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Reset password token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Check password reset token validity",
        "description": "Called by FE once the user follows the password reset link in their email. If this returns an error, no password reset for them!",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Reset password token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New user password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get information of user by id",
        "description": "Fetch user by id. Requires the `perm_view_users` permission, unless viewing yourself (the `me` id)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/all": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a list of users",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_users` permission to fetch.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUsersListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Get a list of users (filtered)",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_users` permission to fetch.\nAll filter keys optional. `prop_name_x` refers to direct data proeprty names, equivalent to use inside of an `AND` block in most cases. \nAll `value` keys can be numbers, strings or arrays of the two (`Swagger 2.0` too limiting to show this)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUsersListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}/change_role": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change user roles",
        "description": "Change the roles user has in system",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New User Roles",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRoles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}/edit": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change user basic info",
        "description": "Change the name/active status of user and password if supplied. To change password, old password must be supplied also. Other properties ignored, absent are merged. Requires the `perm_edit_users` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New basic user information (all properties except for `first_name`, `last_name`, `is_active` and `new_password` are ignored)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserChangeInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}/change_password": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change logged in user password",
        "description": "Change the password current user uses to login. \nInvalidates all active user sessions except for the current one",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New User password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPassChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/invite": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Invite a new user",
        "description": "Create an invitation and send it via email. The invitation `token` enforces the supplied user role, first name and last name. Requires the `perm_create_users` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create User Invitation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserInvitation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnInvitationSentOK"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/invitation": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Fetch invitation info by token",
        "description": "Used by the FE app once the user clicks the link with the token in their email. The FE app should then extract that token from the query parameters and send to this endpoint to receive detailed invitation info and fill in the blanks for the user.<br/> This method will also check invitation validity.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User invitation token",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "3e3b9455-9261-45c1-9aa3-f7e30517b456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnInvitationResponse"
            }
          }
        }
      }
    },
    "/users/create-invited": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user by using an invitation object",
        "description": "Create a user from data in hte identified invitation. The invitation integrity is ensured before the creation takes place. New user does not get auto logged in.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create User By Invitation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserByInvite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "Create a user from provided data. Does not auto-login created user.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          }
        }
      }
    },
    "/users/rm/{user_id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "description": "_Soft Delete_ a user in the system by setting their `is_active` flag to `false`. Can be used to deactivate yourself as well. Requires the `perm_delete_users` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "Identifier of user to delete",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "definitions": {
    "EntitiesFilter": {
      "description": "Entity filter. Scoped to a `filter` key to easily combine with other POST data.",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "properties": {
            "or": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterField"
              }
            },
            "and": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterField"
              }
            },
            "not": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterField"
              }
            },
            "prop_name_X": {
              "type": "string",
              "example": "serah|-77..."
            },
            "prop_name_1": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "expression": {
                  "type": "string",
                  "example": "eq|ne|or|and|lt|gte..."
                }
              }
            },
            "prop_name_2": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "expression": {
                  "type": "string",
                  "example": "eq|ne|or|and|lt|gte..."
                }
              }
            }
          }
        },
        "limit": {
          "type": "integer",
          "description": "How many rows to output",
          "example": 10
        },
        "offset": {
          "type": "integer",
          "description": "How many rows to skip",
          "example": 20
        },
        "order": {
          "type": "array",
          "description": "Set order to return results in. Can sort by multiple properties. Property \"by\" specifies property/values to sort by, and \"order\" specifies in what order that property should be sorted (asc - ascending / desc - descending)",
          "items": {
            "type": "object",
            "properties": {
              "by": {
                "type": "string",
                "example": "first_name"
              },
              "order": {
                "type": "string",
                "example": "asc|desc"
              }
            }
          }
        }
      }
    },
    "EntitiesFilterWithPerms": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EntitiesFilter"
        }
      ],
      "properties": {
        "has_permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "perm_view_users"
          }
        }
      }
    },
    "FilterField": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "example": "id|name|..."
        },
        "value": {
          "type": "string",
          "example": "5|johny|..."
        },
        "expression": {
          "type": "string",
          "example": "eq|ne|or|and|lt|gte..."
        }
      }
    },
    "CreateUser": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "password": {
          "type": "string",
          "example": "secure-password"
        }
      }
    },
    "CreateRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Investment Manager"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "perm_run_investments"
          }
        }
      }
    },
    "CreateUserByInvite": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "number",
          "example": 884
        },
        "password": {
          "type": "string",
          "example": "tiger"
        }
      }
    },
    "CreateUserInvitation": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@notcryptx.io"
        },
        "role_id": {
          "type": "number",
          "example": 88
        }
      }
    },
    "LoginUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "tester@cryptx.io"
        },
        "password": {
          "type": "string",
          "example": "test"
        }
      }
    },
    "LoginUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "token": {
          "type": "string",
          "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...",
          "description": "Authentication token"
        },
        "user": {
          "$ref": "#/definitions/UserDetails"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of permissions user has"
        }
      }
    },
    "UserDetails": {
      "type": "object",
      "description": "user details",
      "properties": {
        "id": {
          "type": "number",
          "example": 45
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "created_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "reset_password_token_hash": {
          "type": "string",
          "example": "79054025255fb1a26e4bc422aef54eb4"
        },
        "reset_password_token_expiry_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "is_active": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "UserChangeInfo": {
      "type": "object",
      "description": "changeable user information",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "is_active": {
          "type": "boolean",
          "example": true
        },
        "old_password": {
          "type": "string",
          "example": "scott"
        },
        "new_password": {
          "type": "string",
          "example": "tiger"
        }
      }
    },
    "InvitationDetails": {
      "type": "object",
      "description": "invitation detials",
      "properties": {
        "id": {
          "type": "number",
          "example": 45
        },
        "was_used": {
          "type": "boolean",
          "example": false
        },
        "token": {
          "type": "string",
          "example": "2394a0ed-3ede-457e-ad60-324532a1ade0"
        },
        "token_expiry_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "role_id": {
          "type": "number",
          "example": 25
        },
        "creator_id": {
          "type": "number",
          "example": 888
        }
      }
    },
    "RoleDetails": {
      "type": "object",
      "description": "role details",
      "properties": {
        "id": {
          "type": "number",
          "example": 48
        },
        "name": {
          "type": "string",
          "example": "System Administrator"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "perm_view_users"
          }
        }
      }
    },
    "UserRoles": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "RolePermissions": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "perm_view_users"
      }
    },
    "UserPassChange": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "example": "scott"
        },
        "new_password": {
          "type": "string",
          "example": "tiger"
        }
      }
    },
    "ReturnRoleResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "role": {
          "$ref": "#/definitions/RoleDetails"
        }
      }
    },
    "ReturnInvitationSentOK": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Send invite to name@mail.com OK"
        }
      }
    },
    "ReturnUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "user": {
          "$ref": "#/definitions/UserDetails"
        }
      }
    },
    "ReturnInvitationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "invitation": {
          "$ref": "#/definitions/InvitationDetails"
        }
      }
    },
    "ReturnUsersListResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDetails"
          }
        },
        "count": {
          "type": "string",
          "example": 26
        }
      }
    },
    "ReturnRolesListResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleDetails"
          }
        },
        "count": {
          "type": "string",
          "example": 26
        }
      }
    },
    "ReturnGroupedPermissionsListResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "number",
          "example": 788,
          "description": "total number of permissions in system"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionsCategory"
          }
        }
      }
    },
    "PermissionsCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 787
        },
        "name": {
          "type": "string",
          "example": "Investment Management"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionObject"
          }
        }
      }
    },
    "PermissionObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 787
        },
        "code": {
          "type": "string",
          "example": "perm_view_invest"
        },
        "name": {
          "type": "string",
          "example": "Investment Management"
        }
      }
    },
    "ApiErrorResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "error": {
          "type": "string"
        }
      }
    },
    "ApiSuccessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "<Some message depending on endpoint context. Not intended for parsing, provides general information to human readers>"
        }
      }
    },
    "ApiUnauthorizezdResponse": {
      "type": "string",
      "example": "Unauthorized"
    }
  },
  "externalDocs": {
    "description": "Find out more about CryptX",
    "url": "https://github.com/twentythirty/CryptX"
  }
}