'use strict';

const Mocha = require('mocha'),
    MailReporter = require('./heroku-mailing-reporter'),
    fs = require('fs'),
    path = require('path'),
    basename = path.basename(__filename);

/**
 * Return absolute paths to all files starting from directory `dir`, 
 * recursively.
 * optionally accepts `filter(filename)` to limit what files get added
 * 
 * Adapted from thread: https://gist.github.com/kethinov/6658166#gistcomment-1295057
 */
const walkSync = (dir, filter = (path) => true, filelist = []) => {
    fs.readdirSync(dir).forEach(file => {

        filelist = fs.statSync(path.join(dir, file)).isDirectory() ?
            walkSync(path.join(dir, file), filter, filelist) :
            (
                filter(file) ?
                filelist.concat(path.join(dir, file)) :
                filelist
            );

    });
    return filelist;
}

const running_this = process.argv[1].split(/\//).pop() === basename;

if (!running_this) {
    console.log(`Created to run as a standalone script!`);
    process.exit(0);
}

if (process.argv.length <= 2) {
    console.log(`Tests base path not speicifed! Usage: node <path to this> <base tests dir>`)
    process.exit(1);
}

// Instantiate a Mocha instance with required timeout and mail generating reporter
var mocha = new Mocha({
    timeout: 20000,
    reporter: MailReporter
});

var baseTestsDir = process.argv[2];

// Add each .js file to the mocha instance
const tests_list = walkSync(baseTestsDir,
    (file) => {
        // Only keep the .js files
        return file.substr(-3) === '.js';
    }, [])

console.log(`Running ${tests_list.length} tests files!`);

tests_list.forEach(function (absolutePath) {
    mocha.addFile(absolutePath);
});

// Run the tests.
const runner = mocha.run(async function (failures) {
    //check if email was generated by reporter
    if (runner.msg_object) {

        const msg = runner.msg_object;

        const send_grid = require('@sendgrid/mail');
        send_grid.setApiKey(process.env.SENDGRID_API_KEY);

        //recipients always a list in msg object
        return await send_grid.sendMultiple(msg).then((result) => {
            console.log(`Email '${msg.subject}' sent to ${msg.to} OK`);
            process.exit(failures);
        }).catch(err => {
            console.error('EMAIL ERROR %o!', err);
            process.exit(failures);
        })
    } else {
        //just exit with number of failures if failed to generate email
        process.exit(failures);
    }
});