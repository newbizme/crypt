{
  "swagger": "2.0",
  "info": {
    "description":
      "This is documentatin for the Node API. For every request you must include in the header: \n `Content-Type: application/json` \n\n <b>Routes with a lock next to them use authorization</b>. In this case, its request-scope JWT tokens in the `Authorization` header coupled with server-side database session persistence. An example secure request would contain the header:\n `Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...`",
    "version": "0.0.1",
    "title": "CryptX System",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "hello@2030.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "cryptx-app-staging.herokuapp.com",
  "basePath": "/v1",
  "tags": [
    {
      "name": "user",
      "description": "Creation and authentication"
    },
    {
      "name": "security",
      "description": "Role and Permission management"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/": {
      "get": {
        "tags": ["MISC"],
        "summary": "Default route",
        "description":
          "The response received when no mathcing route was found for the supplied HTTP verb.\n While the provided example is a `GET`, this will work equally well on all HTTP verbs",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      }
    },
    "roles/{role_id}": {
      "get": {
        "tags": ["security"],
        "summary": "Get ifnormation of role by id",
        "description": "Fetch role by id. Requires the `perm_view_roles` permission",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/{role_id}/change_perms": {
      "post": {
        "tags": ["security"],
        "summary": "Change permissions of role",
        "description":
          "Change what permissions go into the role identified by `role_id`. \nRequires the `perm_alter_role_perm` permission",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to change permissions for",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New Permissions List",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolePermissions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": ["user"],
        "summary": "Authenticate user",
        "description": "Perform login for specific system user",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginUserResponse"
            }
          },
          "422": {
            "description": "Invalid operation",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["user"],
        "summary": "Return current user",
        "description": "Fetch the user currently logged in with this session.",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": ["user"],
        "summary": "Get information of user by id",
        "description":
          "Fetch user by id. Requires the `perm_view_users` permission",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}/change_role": {
      "post": {
        "tags": ["user"],
        "summary": "Change user roles",
        "description": "Change the roles user has in system",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to change roles of",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New User Roles",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRoles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/create": {
      "post": {
        "tags": ["user"],
        "summary": "Create a new user",
        "description":
          "Create a user from provided data. Does not auto-login created user.",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "definitions": {
    "CreateUser": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "password": {
          "type": "string",
          "example": "secure-password"
        }
      }
    },
    "LoginUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "tester@cryptx.io"
        },
        "password": {
          "type": "string",
          "example": "test"
        }
      }
    },
    "LoginUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "token": {
          "type": "string",
          "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...",
          "description": "Authentication token"
        },
        "user": {
          "$ref": "#/definitions/UserDetails"
        }
      }
    },
    "UserDetails": {
      "type": "object",
      "description": "user details",
      "properties": {
        "id": {
          "type": "number",
          "example": 45
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "created_timestamp": {
          "type": "integer",
          "example": 1525424340810
        },
        "reset_password_token_hash": {
          "type": "string",
          "example": "79054025255fb1a26e4bc422aef54eb4"
        },
        "reset_password_token_expiry_timestamp": {
          "type": "integer",
          "example": 1525424340810
        },
        "is_active": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "RoleDetails": {
      "type": "object",
      "description": "role details",
      "properties": {
        "id": {
          "type": "number",
          "example": 48
        },
        "name": {
          "type": "string",
          "example": "ROLE_ADMIN"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserRoles": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "RolePermissions": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ReturnRoleResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "role": {
          "$ref": "#/definitions/RoleDetails"
        }
      }
    },
    "ReturnUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "user": {
          "$ref": "#/definitions/UserDetails"
        }
      }
    },
    "ApiErrorResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "error": {
          "type": "string"
        }
      }
    },
    "ApiSuccessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Parcel Pending API"
        }
      }
    },
    "ApiUnauthorizezdResponse": {
      "type": "string",
      "example": "Unauthorized"
    }
  },
  "externalDocs": {
    "description": "Find out more about CryptX",
    "url": "https://github.com/twentythirty/CryptX"
  }
}
